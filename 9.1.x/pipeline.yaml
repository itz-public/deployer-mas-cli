---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: mas-devops-deploy
  namespace: default
spec:
  workspaces:
    - name: ws
    - name: manage-ws
  params:
    - name: mas-instance-id
      type: string
      default: "inst1"
    - name: mas-workspace-id
      type: string
      default: "masdev"
    - name: mas-install-core
      type: string
      description: "install MAS core"
      default: "true"
    - name: mas-cp4d-version
      type: string
      description: "Supported CP4D version for MAS on OpenShift"
      default: "5.0.0"
    - name: mas-install-manage
      type: string
      description: "controls whether Maximo Manage and CP4D is installed"
      default: "true"
    - name: mas-appws-components
      type: string
      description: "controls what appws components are loaded for manage"
      default: "base=latest"
    - name: mas-cp4d-install-cognos
      type: string
      default: "false"
    - name: mas-install-optimizer
      type: string
      default: "false"
    - name: mas-install-visualinspection
      type: string
      default: "false"
    - name: mas-install-iot
      type: string
      description: "install MAS iot"
      default: "false"
    - name: mas-install-monitor
      type: string
      description: "install MAS Monitor"
      default: "false"
    - name: mas-install-predict
      type: string
      description: "install MAS Predict"
      default: "false"
    - name: mas-install-mref
      type: string
      description: "install MAS MREF"
      default: "false"
    - name: install-demo-data
      type: string
      description: "install demo data, adds 2+ hours to install time"
      default: "true"
    - name: license-file-secret-name
      description: "Store your BYOL license key stored as a base64 encoded arbitrary secret in the kube-system namespace.  provide the name of the secret here.  the defaul is false which means the pipeline will attempt to download a techzone license"
      type: string
      default: "false"
    - name: use-letsencrypt-certs
      description: "use generated letsencrypt certs stored as a secret must specify secret and namespace to locate certs"
      type: string
      default: "true"
    - name: "tlscert-secret"
      description: "location of TLS cert secret"
      type: string
      default: letsencrypt-certs
    - name: "tlscert-namespace"
      description: "namespace of TLS cert secret"
      type: string
      default: openshift-config
    - name: ibm-entitlement-key
      description: "IBM entitlement key. If not set, will use secret manager."
      type: string
      default: "false"
    - name: uds-email
      description: "Contact Email"
      type: string
    - name: uds-firstname
      description: "Contact first name"
      type: string
    - name: uds-lastname
      description: "Contact last name"
      type: string
    - name: rwx-storageclass
      description: "desired RWX storageclass"
      type: string
      default: "ocs-storagecluster-cephfs"
    - name: rwo-storageclass
      description: "desired RWO storageclass"
      type: string
      default: ocs-storagecluster-cephfs
    - name: "mas-catalog-version"
      description: "Maximo operator catalog version. Check https://ibm-mas.github.io/cli/catalogs/"
      type: string
      default: v9-250624-amd64
    - name: mas-channel
      description: "channel to subscribe to"
      type: string
      default: "9.1.x"
    - name: cpd-platform-services
      type: string
      description: "Install CP4D, including WS, WML, OpenScale, Spark in the cluster"
      default: "true"
    - name: cpd-install-spss
      type: string
      description: "Install SPSS in the cluster"
      default: "true"
    - name: cpd-wsl-projectname
      type: string
      description: "Watson Studio Project Name"
      default: "maspredictproject"
    - name: cpd-wml-url
      type: string
      default: "xxx"
    - name: cpd-admin-url
      type: string
      default: "xxx"
    - name: cpd-admin-username
      type: string
      default: "admin"
    - name: cpd-admin-password
      type: string
      default: "xxx"
    - name: mas-install-aibroker
      description: "Install AI Broker"
      type: string
      default: "false"
    - name: artifactory_username
      type: string
    - name: artifactory_token
      type: string
    - name: mas_airbroker_watsonxai_apikey
      type: string
    - name: mas_airbroker_watsonxai_url
      type: string
      default: "https://us-south.ml.cloud.ibm.com"
    - name: mas_airbroker_watsonxai_project_id
      type: string    
    - name: mas_aibroker_channel
      type: string 
      default: "9.1.x"

  finally:
    - name: update-configmap-failure
      when:
        - input: $(tasks.install-mas-core.status)
          operator: notin
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: ibm-pak
      params:
        - name: SCRIPT
          value: |
            oc patch configmap/pipeline-output -p '{"data":{"Status":"Pipeline run failed/skipped to install mas core. See Pipeline run for more details and consider running the pipeline again."}}'
    - name: update-configmap-success
      when:
        - input: $(tasks.install-mas-core.status)
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: ibm-pak
      params:
        - name: SCRIPT
          value: |
            # get and echo the pipeline the mas installer created
            oc patch configmap/pipeline-output -p '{"data":{"Status":"Deployment Pipeline completed to install mas core."}}'
  tasks:
    - name: check-container-registry
      taskRef:
        kind: Task
        name: ibm-pak
      params:
        - name: SCRIPT
          value: |
            status=$(oc get configs.imageregistry.operator.openshift.io cluster -o jsonpath='{.status.conditions[?(@.type=="Available")].reason}')

            TIMEOUT_SECONDS=300
            while [[ "$status" != "Ready" ]] && [[ $SECONDS -lt $TIMEOUT_SECONDS ]]; do
              echo "OpenShift Container Registry is not ready. Current status: $status"

              # Apply the patch commands
              oc patch config.imageregistry.operator.openshift.io/cluster --type=merge -p '{"spec":{"storage":{"emptyDir":{}}}}'
              oc patch config.imageregistry.operator.openshift.io/cluster --type=merge -p '{"spec":{"managementState":"Managed"}}'

              # Check status after a short delay to avoid overwhelming the server
              sleep 10

              # Update status 
              status=$(oc get configs.imageregistry.operator.openshift.io cluster -o jsonpath='{.status.conditions[?(@.type=="Available")].reason}')
            done

            if [[ "$status" == "Ready" ]]; then
              echo "OpenShift Container Registry is ready"
              exit 0
            else
              echo "OpenShift Container Registry failed to become ready after $TIMEOUT_SECONDS seconds." >&2
              exit 1
            fi
    - name: get-ibm-entitlement-key
      when:
        - input: "$(params.ibm-entitlement-key)"
          operator: in
          values: ["false"]
      taskRef:
        name: ibmcloud-secrets-manager-get
        kind: Task
      retries: 2
      params:
        - name: KEY_ID
          value: 968d7819-f2c5-7b67-c420-3c6bfd51521e
        - name: SECRETS_MANAGER_ENDPOINT_URL
          value: >-
            https://afa20521-cd75-4864-843f-e59fd0ffd49d.us-south.secrets-manager.appdomain.cloud
    - name: set-ibm-entitlement-key
      runAfter:
        - get-ibm-entitlement-key
      params:
        - name: ibm-entitlement-key
          value: "$(params.ibm-entitlement-key)"
      retries: 3
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: ibm-entitlement-key
        steps:
          - name: copy-entitlement-key-to-ws
            image: quay.io/openshift/origin-cli:4.15
            script: |
              #!/usr/bin/env bash

              # --- Configuration ---
              MAX_RETRIES=3
              DELAY_SECONDS=5
              SUCCESS=false

              if [ "$(params.ibm-entitlement-key)" == "false" ]; then
                echo "Use TechZone provided entitlement key"
                KEY_VALUE="$(tasks.get-ibm-entitlement-key.results.secret-value)"

                # Retry loop
                for attempt in $(seq 1 ${MAX_RETRIES}); do
                  echo "Attempt ${attempt}/${MAX_RETRIES}: Writing to $(workspaces.ws.path)/ek.dat..."
                  echo "${KEY_VALUE}" > "$(workspaces.ws.path)/ek.dat"

                  if [ $? -eq 0 ]; then
                    SUCCESS=true
                    break # Exit loop on success
                  fi

                  # Don't sleep on the last failed attempt
                  if [ ${attempt} -lt ${MAX_RETRIES} ]; then
                    echo "Failed. Retrying in ${DELAY_SECONDS} seconds..."
                    sleep ${DELAY_SECONDS}
                  fi
                done

              else
                echo "Use user provided entitlement key"
                KEY_VALUE="$(params.ibm-entitlement-key)"

                # Retry loop (repeated for simplicity)
                for attempt in $(seq 1 ${MAX_RETRIES}); do
                  echo "Attempt ${attempt}/${MAX_RETRIES}: Writing to $(workspaces.ws.path)/ek.dat..."
                  echo "${KEY_VALUE}" > "$(workspaces.ws.path)/ek.dat"

                  if [ $? -eq 0 ]; then
                    SUCCESS=true
                    break # Exit loop on success
                  fi
                  
                  # Don't sleep on the last failed attempt
                  if [ ${attempt} -lt ${MAX_RETRIES} ]; then
                    echo "Failed. Retrying in ${DELAY_SECONDS} seconds..."
                    sleep ${DELAY_SECONDS}
                  fi
                done
              fi

              # Final check
              if [ "${SUCCESS}" != "true" ]; then
                echo "Error: All ${MAX_RETRIES} attempts to create ek.dat failed." >&2
                exit 1
              fi

              echo "ek.dat created successfully."
              exit 0
    - name: get-maximo-licensefile
      retries: 2
      workspaces:
        - name: ws
      params:
        - name: KEY_ID
          value: 2d52b201-117a-35ea-71f0-9781a93fbed4
        - name: SECRETS_MANAGER_ENDPOINT_URL
          value: >-
            https://afa20521-cd75-4864-843f-e59fd0ffd49d.us-south.secrets-manager.appdomain.cloud
        - name: LICENSE_FILE_SECRET_NAME
          value: "$(params.license-file-secret-name)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: KEY_ID
          - name: SECRETS_MANAGER_ENDPOINT_URL
          - name: LICENSE_FILE_SECRET_NAME
        steps:
          - name: write-maximo-licensefile
            image: quay.io/openshift/origin-cli:4.12
            script: |
              #!/usr/bin/env bash

              if [[ $(params.LICENSE_FILE_SECRET_NAME) == "false" ]]; then
                # Retrieve the IBM Cloud API Key configured in a `deployer` cluster
                export IBMCLOUD_API_KEY=$(oc get secret ibm-secret -n kube-system -o jsonpath='{.data.apiKey}' | base64 -d)
                export AUTH_RESPONSE_JSON=$(curl -s -X POST \
                  "https://iam.cloud.ibm.com/identity/token" \
                  --header 'Content-Type: application/x-www-form-urlencoded' \
                  --header 'Accept: application/json' \
                  --data-urlencode 'grant_type=urn:ibm:params:oauth:grant-type:apikey' \
                  --data-urlencode "apikey=${IBMCLOUD_API_KEY}")
                export ACCESS_TOKEN=$(echo $AUTH_RESPONSE_JSON | grep -o '"access_token":"[^"]*' | grep -o '[^"]*$')
                export SECRET_JSON=$(curl -s -X GET --location --header "Authorization: Bearer ${ACCESS_TOKEN}" --header "Accept: application/json" "$(params.SECRETS_MANAGER_ENDPOINT_URL)/api/v2/secrets/$(params.KEY_ID)")
                echo $SECRET_JSON |  grep -o '"payload":"[^"]*' | grep -o '[^"]*$' | base64 -d > $(workspaces.ws.path)/license.dat

              else
                oc get secret $(params.LICENSE_FILE_SECRET_NAME) -n default -o jsonpath='{.data.licensefile}' | base64 -d | base64 -d > $(workspaces.ws.path)/license.dat
              fi

              cat $(workspaces.ws.path)/license.dat
              exit
    - name: get-tls-certs
      runAfter:
        - set-ibm-entitlement-key
        - get-maximo-licensefile
      when:
        - input: "$(params.use-letsencrypt-certs)"
          operator: in
          values: ["true"]
      retries: 3
      params:
        - name: TLSCERT_SECRET_LOCATION
          value: "$(params.tlscert-secret)"
        - name: TLSCERT_SECRET_NAMESPACE
          value: "$(params.tlscert-namespace)"
      workspaces:
        - name: ws
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: TLSCERT_SECRET_LOCATION
          - name: TLSCERT_SECRET_NAMESPACE
        steps:
          - name: get-tls-certs
            image: quay.io/congxdev/ibm-pak-ubi:latest
            script: |
              ### this is the method to load certs to the mas installer
              mkdir -p $(workspaces.ws.path)/masconfig/certs/core/
              wget -qO - https://letsencrypt.org/certs/lets-encrypt-r3.pem > $(workspaces.ws.path)/masconfig/certs/core/ca.crt
              oc get secret $(params.TLSCERT_SECRET_LOCATION) -n $(params.TLSCERT_SECRET_NAMESPACE) -o jsonpath="{.data['tls\.key']}" | base64 -d > $(workspaces.ws.path)/masconfig/certs/core/tls.key
              oc get secret $(params.TLSCERT_SECRET_LOCATION) -n $(params.TLSCERT_SECRET_NAMESPACE) -o jsonpath="{.data['tls\.crt']}" | base64 -d > $(workspaces.ws.path)/masconfig/certs/core/tls.crt
              ls $(workspaces.ws.path)/masconfig/certs/core/
              cat $(workspaces.ws.path)/masconfig/certs/core/tls.key
              cat $(workspaces.ws.path)/masconfig/certs/core/tls.crt

              # copy to app directories
              echo "copying to app directories..."
              mkdir -p $(workspaces.ws.path)/masconfig/certs/iot/
              mkdir -p $(workspaces.ws.path)/masconfig/certs/manage/
              mkdir -p $(workspaces.ws.path)/masconfig/certs/monitor/
              mkdir -p $(workspaces.ws.path)/masconfig/certs/add/
              mkdir -p $(workspaces.ws.path)/masconfig/certs/assist/
              mkdir -p $(workspaces.ws.path)/masconfig/certs/optimizer/
              mkdir -p $(workspaces.ws.path)/masconfig/certs/visualinspection/
              mkdir -p $(workspaces.ws.path)/masconfig/certs/predict/
              mkdir -p $(workspaces.ws.path)/masconfig/certs/aibroker/
              mkdir -p $(workspaces.ws.path)/masconfig/certs/facilities/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/iot/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/manage/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/monitor/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/add/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/assist/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/optimizer/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/visualinspection/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/predict/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/aibroker/
              cp $(workspaces.ws.path)/masconfig/certs/core/* $(workspaces.ws.path)/masconfig/certs/facilities/

              exit
    - name: install-mas-core
      when:
        - input: "$(params.mas-install-core)"
          operator: in
          values: ["true"]
      retries: 3
      timeout: "12h"
      runAfter:
        - get-tls-certs
        - check-container-registry
      workspaces:
        - name: ws
      params:
        - name: mas-catalog-version
          value: "$(params.mas-catalog-version)"
        - name: mas-channel
          value: "$(params.mas-channel)"
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
        - name: mas-workspace-id
          value: "$(params.mas-workspace-id)"
        - name: mas-install-core
          value: "$(params.mas-install-core)"
        - name: uds-email
          value: "$(params.uds-email)"
        - name: uds-firstname
          value: "$(params.uds-firstname)"
        - name: uds-lastname
          value: "$(params.uds-lastname)"
        - name: rwo-storageclass
          value: "$(params.rwo-storageclass)"
        - name: rwx-storageclass
          value: "$(params.rwx-storageclass)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-catalog-version
          - name: mas-channel
          - name: mas-instance-id
          - name: mas-workspace-id
          - name: uds-email
          - name: uds-firstname
          - name: uds-lastname
          - name: rwo-storageclass
          - name: rwx-storageclass
          - name: mas-install-core
        steps:
          - name: run-mas-cli
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash
              # extract license id from license.dat
              export SLS_LICENSE_ID=$(cat $(workspaces.ws.path)/license.dat | head -1 | cut -d ' ' -f3)
              export SLS_LICENSE_FILE=$(workspaces.ws.path)/license.dat

              export IBM_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_INSTANCE_ID=$(params.mas-instance-id)
              export MAS_ WORKSPACE_ID=$(params.mas-workspace-id)
              export MAS_CONFIG_DIR=$(workspaces.ws.path)/masconfig
              export MAS_MANUAL_CERT_MGMT=True
              export MAS_CATALOG_VERSION=$(params.mas-catalog-version)
              export MAS_CHANNEL=$(params.mas-channel)

              export DRO_ACTION=install-dro
              export DRO_CONTACT_EMAIL=$(params.uds-email)
              export DRO_CONTACT_FIRSTNAME=$(params.uds-firstname)
              export DRO_CONTACT_LASTNAME=$(params.uds-lastname)

              export PROMETHEUS_ALERTMGR_STORAGE_CLASS=$(params.rwx-storageclass)
              export PROMETHEUS_STORAGE_CLASS=$(params.rwo-storageclass)
              export PROMETHEUS_USERWORKLOAD_STORAGE_CLASS=$(params.rwo-storageclass)
              export GRAFANA_INSTANCE_STORAGE_CLASS=$(params.rwo-storageclass)
              export MONGODB_STORAGE_CLASS=$(params.rwo-storageclass)
              export UDS_STORAGE_CLASS=$(params.rwo-storageclass)
              export DRO_STORAGE_CLASS=$(params.rwo-storageclass)

              #check ai broker public cert
              #cat ansible-devops/roles/suite_certs/defaults/main.yml
              # wget -qO - "https://raw.githubusercontent.com/zxue/ansible-devops/master/ibm/mas_devops/roles/suite_certs/defaults/main.yml" > ansible-devops/roles/suite_certs/defaults/main.yml
              #cat ansible-devops/roles/suite_certs/defaults/main.yml

              ansible-playbook ibm.mas_devops.oneclick_core
    - name: copy-files-to-workspaces
      runAfter:
        - install-mas-core
      workspaces:
        - name: ws
          workspace: ws
        - name: manage-ws
          workspace: manage-ws
      params:
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-instance-id
        steps:
          - name: run-mas-cli-test
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash
              SOURCE_PATH="$(workspaces.ws.path)"
              DEST_PATH="$(workspaces.manage-ws.path)"

              echo "--- Starting Workspace Copy ---"
              echo "Source:      ${SOURCE_PATH}"
              echo "Destination: ${DEST_PATH}"
              echo ""

              echo "1. Validating source directory..."

              # Check if the source directory exists and is not empty.
              # If it doesn't exist or is empty, there's nothing to do.
              if [ ! -d "${SOURCE_PATH}" ] || [ -z "$(ls -A "${SOURCE_PATH}")" ]; then
                echo "Source directory is missing or empty. No files to copy."
                # This exits successfully because no action is a valid outcome.
                # If an empty source should be an error, change `exit 0` to `exit 1`.
                exit 0
              fi
              echo "   Source is valid."
              echo ""

              echo "2. Copying files..."

              # Use `cp -a` (archive mode) to preserve permissions, ownership, and timestamps.
              # It's generally better than `cp -r` for build/CI workspaces.
              # The `/." at the end of SOURCE_PATH copies the *contents* of the directory,
              # not the directory itself, into the destination.
              cp -a "${SOURCE_PATH}/." "${DEST_PATH}/"

              # --- 3. Validate Result ---
              # Check the exit code (`$?`) of the `cp` command. 0 means success.
              if [ $? -eq 0 ]; then
                echo "Success: Files and directories copied successfully."
              else
                echo "Failure: The copy operation failed."
                exit 1
              fi

              echo "--- Workspace Copy Finished ---"
    - name: install-manage
      when:
        - input: "$(params.mas-install-manage)"
          operator: in
          values: ["true"]
      retries: 3
      timeout: "12h"
      runAfter:
        # - install-mas-core
        - copy-files-to-workspaces
      workspaces:
        - name: ws
          workspace: manage-ws
      params:
        - name: mas-catalog-version
          value: "$(params.mas-catalog-version)"
        - name: mas-cp4d-version
          value: "$(params.mas-cp4d-version)"
        - name: mas-channel
          value: "$(params.mas-channel)"
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
        - name: mas-workspace-id
          value: "$(params.mas-workspace-id)"
        - name: install-demo-data
          value: "$(params.install-demo-data)"
        - name: mas-cp4d-install-cognos
          value: "$(params.mas-cp4d-install-cognos)"        
        - name: rwx-storageclass
          value: "$(params.rwx-storageclass)"
        - name: rwo-storageclass
          value: "$(params.rwo-storageclass)"
        - name: mas-appws-components
          value: "$(params.mas-appws-components)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-instance-id
          - name: mas-workspace-id
          - name: mas-catalog-version
          - name: mas-cp4d-version
          - name: mas-channel
          - name: install-demo-data
          - name: mas-cp4d-install-cognos
          - name: rwx-storageclass
          - name: rwo-storageclass
          - name: mas-appws-components
        steps:
          - name: run-mas-cli
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash
              export MAS_INSTANCE_ID=$(params.mas-instance-id)
              export MAS_WORKSPACE_ID=$(params.mas-workspace-id)
              export MAS_CONFIG_DIR=$(workspaces.ws.path)/masconfig
              export IBM_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_CONFIG_SCOPE=wsapp
              export MAS_APPWS_BINDINGS_JDBC=workspace-application
              export MAS_CATALOG_VERSION=$(params.mas-catalog-version)
              export MAS_APP_CHANNEL=$(params.mas-channel)
              
              export DB2_INSTANCE_NAME=db2wh-manage
              export DB2_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export DB2_DBNAME=BLUDB
              export DB2_NODE_LABEL=db2wh
              export DB2_META_STORAGE_CLASS=$(params.rwx-storageclass)
              export DB2_META_STORAGE_SIZE=100Gi
              export DB2_META_STORAGE_ACCESSMODE=ReadWriteMany
              export DB2_DATA_STORAGE_CLASS=$(params.rwx-storageclass)
              export DB2_DATA_STORAGE_SIZE=100Gi
              export DB2_DATA_STORAGE_ACCESSMODE=ReadWriteOnce
              export DB2_BACKUP_STORAGE_CLASS=$(params.rwx-storageclass)
              export DB2_BACKUP_STORAGE_SIZE=100Gi
              export DB2_BACKUP_STORAGE_ACCESSMODE=ReadWriteMany
              export DB2_TEMP_STORAGE_CLASS=$(params.rwx-storageclass)
              export DB2_TEMP_STORAGE_SIZE=50Gi
              export DB2_TEMP_STORAGE_ACCESSMODE=ReadWriteOnce
              #export DB2_CPU_REQUESTS=6000m
              #export DB2_CPU_LIMITS=10000m
              #export DB2_MEMORY_REQUESTS=10Gi
              #export DB2_MEMORY_LIMITS=20Gi

              export MAS_APP_SETTINGS_PERSISTENT_VOLUMES_FLAG=true
              export MAS_APP_SETTINGS_BASE_LANG=EN
              # export MAS_APP_SETTINGS_SECONDARY_LANGS='DE'
              export MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE=jms
              export MAS_MANAGE_ATTACHMENTS_PROVIDER=filestorage
              export MAS_APP_SETTINGS_ATTACHMENTS_MOUNT_PATH=/DOCLINKS
              export MANAGE_AIO_FLAG=false
              export MAS_APP_ID=manage

              export MAS_APPWS_COMPONENTS="$(params.mas-appws-components)"

              export MAS_APP_SETTINGS_DEMODATA=$(params.install-demo-data)

              export CPD_INSTALL_PLATFORM="false"
              export CPD_INSTALL_COGNOS=$(params.mas-cp4d-install-cognos)
              export CPD_PRODUCT_VERSION=$(params.mas-cp4d-version) 
              export CPD_PRIMARY_STORAGE_CLASS=$(params.rwx-storageclass)
              export CPD_METADATA_STORAGE_CLASS=$(params.rwx-storageclass)
              export CPD_SERVICE_STORAGE_CLASS=$(params.rwx-storageclass)
              export CPD_SERVICE_BLOCK_STORAGE_CLASS=$(params.rwo-storageclass)

              ansible-playbook ibm.mas_devops.oneclick_add_manage

    - name: install-optimizer
      when:
        - input: "$(params.mas-install-optimizer)"
          operator: in
          values: ["true"]
      retries: 3
      timeout: "12h"
      runAfter:
        - install-manage
      workspaces:
        - name: ws
      params:
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
        - name: mas-workspace-id
          value: "$(params.mas-workspace-id)"
        - name: mas-catalog-version
          value: "$(params.mas-catalog-version)"
        - name: mas-channel
          value: "$(params.mas-channel)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-instance-id
          - name: mas-workspace-id
          - name: mas-catalog-version
          - name: mas-channel
        steps:
          - name: run-mas-cli
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash
              export MAS_INSTANCE_ID=$(params.mas-instance-id)
              export MAS_WORKSPACE_ID=$(params.mas-workspace-id)
              export MAS_CONFIG_DIR=$(workspaces.ws.path)/masconfig
              export IBM_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export DB2_ENTITLEMENT_KEY=$IBM_ENTITLEMENT_KEY
              export MAS_CONFIG_SCOPE=system
              export MAS_APPWS_BINDINGS_JDBC=system
              export MAS_CATALOG_VERSION=$(params.mas-catalog-version)
              export MAS_APP_CHANNEL=$(params.mas-channel)

              ansible-playbook ibm.mas_devops.oneclick_add_optimizer

    - name: install-visualinspection
      when:
        - input: "$(params.mas-install-visualinspection)"
          operator: in
          values: ["true"]
      retries: 3
      timeout: "12h"
      runAfter:
        - install-mas-core
      workspaces:
        - name: ws
      params:
        - name: mas-catalog-version
          value: "$(params.mas-catalog-version)"
        - name: mas-channel
          value: "$(params.mas-channel)"
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
        - name: mas-workspace-id
          value: "$(params.mas-workspace-id)"    
        - name: rwx-storageclass
          value: "$(params.rwx-storageclass)"
        - name: rwo-storageclass
          value: "$(params.rwo-storageclass)"
        - name: uds-email
          value: "$(params.uds-email)"
        - name: uds-firstname
          value: "$(params.uds-firstname)"
        - name: uds-lastname
          value: "$(params.uds-lastname)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-instance-id
          - name: mas-workspace-id
          - name: mas-catalog-version
          - name: mas-channel
          - name: rwx-storageclass
          - name: rwo-storageclass
          - name: uds-email
          - name: uds-firstname
          - name: uds-lastname
        steps:
          - name: run-mas-cli
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash
              export MAS_INSTANCE_ID=$(params.mas-instance-id)
              export MAS_WORKSPACE_ID=$(params.mas-workspace-id)
              export MAS_CONFIG_DIR=$(workspaces.ws.path)/masconfig
              export IBM_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_CONFIG_SCOPE=wsapp
              export MAS_APPWS_BINDINGS_JDBC=workspace-application
              export MAS_CATALOG_VERSION=$(params.mas-catalog-version)
              export MAS_APP_CHANNEL=$(params.mas-channel)

              export DRO_CONTACT_EMAIL=$(params.uds-email)
              export DRO_CONTACT_FIRSTNAME=$(params.uds-firstname)
              export DRO_CONTACT_LASTNAME=$(params.uds-lastname)
              export DRO_NAMESPACE=ibm-dro
              
              export GPU_DRIVER_VERSION=565.57.01

              ansible-playbook ibm.mas_devops.oneclick_add_visualinspection

    - name: install-iot
      when:
        - input: "$(params.mas-install-iot)"
          operator: in
          values: ["true"]
      retries: 3
      timeout: "12h"
      runAfter:
        # - install-mas-core
        - copy-files-to-workspaces

      workspaces:
        - name: ws
          workspace: ws
      params:
        - name: mas-catalog-version
          value: "$(params.mas-catalog-version)"
        - name: mas-channel
          value: "$(params.mas-channel)"
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
        - name: mas-workspace-id
          value: "$(params.mas-workspace-id)"
        - name: rwo-storageclass
          value: "$(params.rwo-storageclass)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-catalog-version
          - name: mas-channel
          - name: mas-instance-id
          - name: mas-workspace-id
          - name: rwo-storageclass
        steps:
          - name: run-mas-cli
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash

              export MAS_INSTANCE_ID=$(params.mas-instance-id)
              export MAS_WORKSPACE_ID=$(params.mas-workspace-id)
              export MAS_CONFIG_DIR=$(workspaces.ws.path)/masconfig
              export IBM_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export DB2_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_CONFIG_SCOPE=system
              export MAS_APPWS_BINDINGS_JDBC=system
              export MAS_CATALOG_VERSION=$(params.mas-catalog-version)
              export MAS_APP_CHANNEL=$(params.mas-channel)
              export DB2_INSTANCE_NAME="db2w-shared"

              export MAS_APP_SETTINGS_IOT_FPL_PVC_STORAGE_CLASS=$(params.rwo-storageclass)

              ansible-playbook ibm.mas_devops.oneclick_add_iot
    - name: install-monitor
      when:
        - input: "$(params.mas-install-monitor)"
          operator: in
          values: ["true"]
      retries: 3
      timeout: "12h"
      runAfter:
        - install-iot
      workspaces:
        - name: ws
      params:
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
        - name: mas-workspace-id
          value: "$(params.mas-workspace-id)"
        - name: mas-catalog-version
          value: "$(params.mas-catalog-version)"
        - name: mas-channel
          value: "$(params.mas-channel)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-instance-id
          - name: mas-workspace-id
          - name: mas-catalog-version
          - name: mas-channel
        steps:
          - name: run-mas-cli
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash
              export MAS_INSTANCE_ID=$(params.mas-instance-id)
              export MAS_WORKSPACE_ID=$(params.mas-workspace-id)
              export MAS_CONFIG_DIR=$(workspaces.ws.path)/masconfig
              export IBM_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export DB2_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_CONFIG_SCOPE=system
              export MAS_APPWS_BINDINGS_JDBC=system
              export MAS_CATALOG_VERSION=$(params.mas-catalog-version)
              export MAS_APP_CHANNEL=$(params.mas-channel)

              ansible-playbook ibm.mas_devops.oneclick_add_monitor
    - name: install-predict
      when:
        - input: "$(params.mas-install-predict)"
          operator: in
          values: ["true"]
      retries: 3
      timeout: "12h"
      runAfter:
        - install-monitor
        - install-manage
      workspaces:
        - name: ws
      params:
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
        - name: mas-workspace-id
          value: "$(params.mas-workspace-id)"
        - name: mas-catalog-version
          value: "$(params.mas-catalog-version)"
        - name: mas-channel
          value: "$(params.mas-channel)"
        - name: mas-cp4d-version
          value: "$(params.mas-cp4d-version)"
        - name: cpd-wsl-projectname
          value: "$(params.cpd-wsl-projectname)"
        - name: cpd-platform-services
          value: "$(params.cpd-platform-services)"
        - name: cpd-install-spss
          value: "$(params.cpd-install-spss)"
        - name: cpd-wml-url
          value: "$(params.cpd-wml-url)"
        - name: cpd-admin-url
          value: "$(params.cpd-admin-url)"
        - name: cpd-admin-username
          value: "$(params.cpd-admin-username)"
        - name: cpd-admin-password
          value: "$(params.cpd-admin-password)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-instance-id
          - name: mas-workspace-id
          - name: mas-catalog-version
          - name: mas-channel
          - name: mas-cp4d-version
          - name: cpd-platform-services
          - name: cpd-install-spss
          - name: cpd-wsl-projectname
          - name: cpd-wml-url
          - name: cpd-admin-url
          - name: cpd-admin-username
          - name: cpd-admin-password
        steps:
          - name: run-mas-cli
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash
              
              export MAS_INSTANCE_ID=$(params.mas-instance-id)
              export MAS_WORKSPACE_ID=$(params.mas-workspace-id)
              export MAS_CONFIG_DIR=$(workspaces.ws.path)/masconfig
              export IBM_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export DB2_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_CONFIG_SCOPE=system
              export MAS_APPWS_BINDINGS_JDBC=system
              export MAS_CATALOG_VERSION=$(params.mas-catalog-version)
              export MAS_APP_CHANNEL=$(params.mas-channel)

              export CPD_PRODUCT_VERSION=$(params.mas-cp4d-version)
              export CPD_INSTALL_PLATFORM=$(params.cpd-platform-services)
              export CPD_INSTALL_WSL=$(params.cpd-platform-services)
              export CPD_INSTALL_WML=$(params.cpd-platform-services)
              export CPD_INSTALL_SPARK=$(params.cpd-platform-services)
              export CPD_INSTALL_OPENSCALE=$(params.cpd-platform-services)
              export CPD_INSTALL_SPSS=$(params.cpd-install-spss)
              export CPD_WSL_PROJECT_ID=$(params.cpd-wsl-projectname)
              export CPD_WML_INSTANCE_ID="openshift"
              export WML_VERSION=$(params.mas-cp4d-version)
              
              # use internal cp4d and services in the OpenShift cluster
              if [ $(params.cpd-platform-services) == "true" ]; then
                export CPD_WML_URL="https://$(oc get ZenService "lite-cr"  -o jsonpath="{.status.url}{'\n'}" -n ibm-cpd)"
              
              # Use external cp4d and services
              else
                export CPD_WML_URL=$(params.cpd-wml-url)
                export CPD_ADMIN_URL=$(params.cpd-admin-url)
                export CPD_ADMIN_USERNAME=$(params.cpd-admin-username)
                export CPD_ADMIN_PASSWORD=$(params.cpd-admin-password)
              fi

              ansible-playbook ibm.mas_devops.oneclick_add_predict
    - name: install-mas-aibroker
      when:
        - input: "$(params.mas-install-aibroker)"
          operator: in
          values: ["true"]
      retries: 3
      timeout: "12h"
      runAfter:
        - install-mas-core
      workspaces:
        - name: ws
      params:
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
        - name: mas-workspace-id
          value: "$(params.mas-workspace-id)"
        - name: mas-catalog-version
          value: "$(params.mas-catalog-version)"
        - name: mas-channel
          value: "$(params.mas-channel)"
        - name: uds-email
          value: "$(params.uds-email)"
        - name: artifactory_username
          value: "$(params.artifactory_username)"
        - name: artifactory_token
          value: "$(params.artifactory_token)"
        - name: mas_airbroker_watsonxai_apikey
          value: "$(params.mas_airbroker_watsonxai_apikey)"
        - name: mas_airbroker_watsonxai_url
          value: "$(params.mas_airbroker_watsonxai_url)"
        - name: mas_airbroker_watsonxai_project_id
          value: "$(params.mas_airbroker_watsonxai_project_id)"
        - name: mas_aibroker_channel
          value: "$(params.mas_aibroker_channel)"
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-instance-id
          - name: mas-workspace-id
          - name: mas-catalog-version
          - name: mas-channel
          - name: uds-email
          - name: artifactory_username
          - name: artifactory_token
          - name: mas_airbroker_watsonxai_apikey
          - name: mas_airbroker_watsonxai_url
          - name: mas_airbroker_watsonxai_project_id
          - name: mas_aibroker_channel
        steps:
          - name: run-mas-cli
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash
              # vars
              export MAS_INSTANCE_ID=$(params.mas-instance-id)
              export MAS_APP_CHANNEL=$(params.mas-channel)
              export MAS_CATALOG_VERSION=$(params.mas-catalog-version)
              export IBM_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_CONFIG_DIR=$(workspaces.ws.path)/masconfig

              # Install deps 
              export INSTALL_DB2="false"
              export INSTALL_MINIO="true"
              export INSTALL_MARIADB="true"
              export INSTALL_MONGO="false"
              export INSTALL_SLS="false"
              export INSTALL_DRO="false"

              # S3 in main CR
              export MAS_AIBROKER_S3_BUCKET_PREFIX="s3"
              export MAS_AIBROKER_S3_REGION="" #empty if installing minio
              export MAS_AIBROKER_S3_ENDPOINT_URL="http://minio-service.minio.svc.cluster.local:9000"

              # S3 for tenant
              export MAS_AIBROKER_TENANT_S3_REGION="" #empty if installing minio
              export MAS_AIBROKER_TENANT_S3_ENDPOINT_URL="http://minio-service.minio.svc.cluster.local:9000"
              export MAS_AIBROKER_TENANT_S3_BUCKET_PREFIX="s3"
              export MAS_AIBROKER_TENANT_S3_ACCESS_KEY="minio"
              export MAS_AIBROKER_TENANT_S3_SECRET_KEY="minio123"

              # RSL
              #export RSL_URL="http://sandbox43-1.fyre.ibm.com:3001/api/v3/vector/query"
              #export RSL_ORG_ID="xxxx-xxxx-xxx-984xxxx-f2960a07531xxxxx"
              #export RSL_TOKEN="Bearer eyxxxx"

              # MINIO
              export MINIO_ROOT_PASSWORD="minio123" # this is in mariadb role
              export MAS_AIBROKER_STORAGE_ACCESSKEY="minio"
              export MAS_AIBROKER_STORAGE_SECRETKEY=${MINIO_ROOT_PASSWORD}
              export MAS_AIBROKER_STORAGE_HOST="minio-service.minio.svc.cluster.local"
              export MAS_AIBROKER_STORAGE_SSL="false" # dont change this (for now)
              export MAS_AIBROKER_STORAGE_PROVIDER="minio"
              export MAS_AIBROKER_STORAGE_PORT="9000"
              export MAS_AIBROKER_STORAGE_REGION=""
              export MAS_AIBROKER_STORAGE_PIPELINES_BUCKET="km-pipelines"
              export MAS_AIBROKER_STORAGE_TENANTS_BUCKET="km-tenants"
              export MAS_AIBROKER_STORAGE_TEMPLATES_BUCKET="km-templates"

              # MARIADB
              export MARIADB_PASSWORD="mariadb"
              export MAS_AIBROKER_DB_HOST="mariadb-instance.mariadb.svc.cluster.local"
              export MAS_AIBROKER_DB_PORT="3306"
              export MAS_AIBROKER_DB_USER="mariadb"
              export MAS_AIBROKER_DB_DATABASE="kmpipeline" # we can set as default
              export MAS_AIBROKER_DB_SECRET_NAME="ds-pipeline-db-instance"  # we can set as default
              export MAS_AIBROKER_DB_SECRET_VALUE=${MARIADB_PASSWORD}

              # WATSONX AI
              export MAS_AIBROKER_WATSONXAI_APIKEY="MmLqNialQ4ajWglbDDHh4NnzMnTgIQvEUkPXjS4yPEq-"
              export MAS_AIBROKER_WATSONXAI_URL="https://us-south.ml.cloud.ibm.com"
              export MAS_AIBROKER_WATSONXAI_PROJECT_ID="531bc621-cdc9-48d4-b3d2-10e56d835e4b"

              # SAAS
              export MAS_AIBROKER_SUBSCRIPTION_ID="01"
              export MAS_AIBROKER_DRO_TENANT_ID="01"
              export MAS_AIBROKER_TENANT_ENTITLEMENT_START_DATE="2025-01-01"
              export MAS_AIBROKER_TENANT_ENTITLEMENT_END_DATE="2060-01-01"
              export MAS_AIBROKER_SAAS="false"

              ansible-playbook ibm.mas_devops.oneclick_add_aibroker.yml

    - name: install-mref
      when:
        - input: "$(params.mas-install-mref)"
          operator: in
          values: ["true"]
      retries: 3
      timeout: "12h"
      runAfter:
        - install-mas-core
      workspaces:
        - name: ws
          workspace: ws
      params:
        - name: mas-catalog-version
          value: "$(params.mas-catalog-version)"
        - name: mas-channel
          value: "$(params.mas-channel)"
        - name: mas-instance-id
          value: "$(params.mas-instance-id)"
        - name: mas-workspace-id
          value: "$(params.mas-workspace-id)"
        - name: rwo-storageclass
          value: "$(params.rwo-storageclass)"
        - name: rwx-storageclass
          value: "$(params.rwx-storageclass)"          
      taskSpec:
        workspaces:
          - name: ws
        params:
          - name: mas-catalog-version
          - name: mas-channel
          - name: mas-instance-id
          - name: mas-workspace-id
          - name: rwo-storageclass
          - name: rwx-storageclass
        steps:
          - name: run-mas-cli
            image: quay.io/ibmmas/cli:latest
            script: |
              #!/usr/bin/env bash

              export MAS_INSTANCE_ID=$(params.mas-instance-id)
              export MAS_WORKSPACE_ID=$(params.mas-workspace-id)
              export MAS_CONFIG_DIR=$(workspaces.ws.path)/masconfig
              export IBM_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export DB2_ENTITLEMENT_KEY=$(cat $(workspaces.ws.path)/ek.dat)
              export MAS_CATALOG_VERSION=$(params.mas-catalog-version)
              export MAS_APP_CHANNEL=$(params.mas-channel)


              ansible-playbook ibm.mas_devops.oneclick_add_facilities